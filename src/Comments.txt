MEETING
    Done


    ToDo
        Change FFF Order (s,t,x,y); Change ImageRenderer4D accordingly
        FFF als VectorField speichern
        VectorField Dimensionen parametrisieren
        ImageRenderer4D Make additionalParameter work -> Auch genutzte Dimensionen übergeben, um höhere Dimensionen zu ermöglichen
        Rauschen testen
        Höhere Dimensionen
        Vision aufschreiben auf Folien (Add: Kontaktkurven von kritischen Punkten im Raum sind Bifurkation, in Parameter-Projektion können es auch Fehler durch reduzierte Dimension sein)


    Backlog
        FFF von FFF
        Sattel/Senke/Source prüfen; Fake Source prüfen
        Fix CalculateCriticalPoints (after CalculateBifurcationPoints)
        Zacken aus BifurcationCurve rausbekommen (vermutlich nur wegen niedriger Subdivision Tiefe)





Formalisiert:
    v:                  X Komponente von V
    u:                  Y Komponente von V
    grad(x):            Richtung der stärksten Steigung von x
    X:                  Kreuzprodukt
    det(x):             Determinante von x
    Critical Point:     v = 0; u = 0
    Bifurcation Point:  v = 0; u = 0; det(v,u) = 0; u_0*v_1-u_1*v_0 = 0
    FFF(2D+1):            det(y,t),det(t,x),det(x,y); Senkrechte auf größte Steigung nach x und größte Steigung nach y
    FFF(2D+2):            Vektorfeld(3D+1)(x,y,det(v_x,v_y)); -> FFF darauf berechnen





//TODO Filter zum Berechnen der Linien der Bifurkationen erstellen
//TODO Filter um Teile aus ProcessObject wieder rauszuziehen (kritische Punkte, Bifurkationen, Vektorfeld?)


//Backlog Store Calculations for faster Example
//Backlog Optimization: Start with reduced resolution and use subdivision to ignore big parts of the vectorfield
//Backlog Höhere Dimensionen
//Backlog FFF entsprechend sortieren (s,t,x,y) statt (x,y,s,t)


Vektorfelder:
//1. xd*xd+td; -> vertical zweigeteilt
//2. xd*xd+td+sd -> schräg zweigeteilt
//3. xd*xd+td*td+sd*sd-1 -> durch Kreis geteilt
//4. xd*xd+td -> 2 bifurcationen (linien liegen aufeinander)
//5. (xd*xd+td)*(xd*xd+sd) -> 2 kreuzende Bifurcation Lines (Mit fragmenten im weißen Bereich)
//6. (xd-td)*(xd+td)*(xd-1-sd)*(xd-1+sd) -> seltsame Box
//7. (xd*xd+td)*(yd-1)-(xd*xd+sd)*(yd+1) -> 2 kreuzende Bifurcation Lines (kritische Punkte werden nicht korrekt berechnet)
//8. (xd*xd+td-1)*(yd-1)+(xd*xd+td+1)*(yd+1) -> doppelt parallel vertical zweigeteilt (kritische Punkte werden nicht korrekt berechnet)
//9. 0.5*xd*xd+sd+td-> Paper?

//1. -yd+sd
//2. -yd
//3. -yd
//4. -yd*yd+sd
//5. -yd
//6. -yd
//7. (yd+1)*(yd-1)
//8. (yd+1)*(yd-1)
//9. yd+xd+sd