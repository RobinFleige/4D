MEETING
    ToDo
        Bifurcations für periodic Orbits
        Meta-FFF hat Vorzeichenfehler (vielleicht liegt das an 3D Determinante)
        Sattelpunkt auf Bifurcation Structure finden, wo es von Birth auf Death wechselt (Falls es das gibt)(vermutlich die Bifurcation-Bifurcation des anderen Parameters)
        Analytisch lösen und visualisieren für bessere Ergebnisse
        Beweis für Dimensionalität nach beiden Ansätzen machen
        Klassifizierung machen


    Backlog
        Rauschen testen
        Vision aufschreiben auf Folien (Add: Kontaktkurven von kritischen Punkten im Raum sind Bifurkation, in Parameter-Projektion können es auch Fehler durch reduzierte Dimension sein)
        Store Calculations for faster Example
        Optimization: Start with reduced resolution and use subdivision to ignore big parts of the vectorfield
        Line und Triangle Visualisation does not work with used_dimensions or in higher dimensions that 2x2




Formalisiert:
    v:                  X Komponente von V
    u:                  Y Komponente von V
    grad(x):            Richtung der stärksten Steigung von x
    X:                  Kreuzprodukt
    det(x):             Determinante von x
    Critical Point:     v = 0; u = 0
    Bifurcation Point:  v = 0; u = 0; det(v,u) = 0; u_0*v_1-u_1*v_0 = 0
    FFF(2D+1):            det(y,t),det(t,x),det(x,y); Senkrechte auf größte Steigung nach x und größte Steigung nach y
    FFF(2D+2):            Vektorfeld(3D+1)(x,y,det(v_x,v_y)); -> FFF darauf berechnen




Vektorfelder:
//1. xd*xd+td; -> vertical zweigeteilt
//2. xd*xd+td+sd -> schräg zweigeteilt
//3. xd*xd+td*td+sd*sd-1 -> durch Kreis geteilt
//4. xd*xd+td -> 2 bifurcationen (linien liegen aufeinander)
//5. (xd*xd+td)*(xd*xd+sd) -> 2 kreuzende Bifurcation Lines (Mit fragmenten im weißen Bereich)
//6. (xd-td)*(xd+td)*(xd-1-sd)*(xd-1+sd) -> seltsame Box
//7. (xd*xd+td)*(yd-1)-(xd*xd+sd)*(yd+1) -> 2 kreuzende Bifurcation Lines (kritische Punkte werden nicht korrekt berechnet)
//8. (xd*xd+td-1)*(yd-1)+(xd*xd+td+1)*(yd+1) -> doppelt parallel vertical zweigeteilt (kritische Punkte werden nicht korrekt berechnet)
//9. 0.5*xd*xd+sd+td-> Paper?

//1. -yd+sd
//2. -yd
//3. -yd
//4. -yd*yd+sd
//5. -yd
//6. -yd
//7. (yd+1)*(yd-1)
//8. (yd+1)*(yd-1)
//9. yd+xd+sd



Statt kopieren entweder Move oder Pointer
Bei permanenten Referenzen use reference instead of pointer
Objekt mit new ...() erstellen um Pointer auf Heap zu erstellen und Pointer zu bekommen
nur lokal genutzte Objekte müssen am Ende abgeräumt werden
Werden die Objekte später lokal nicht mehr benötigt können sie mit Move übertragen werden

Wenn ich Funktion mit Objekt aufrufe, wird das Objekt dann einmal beim Aufruf und einmal beim ausführen kopiert?